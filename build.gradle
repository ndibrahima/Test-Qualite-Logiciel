plugins {
  id 'org.springframework.boot' version '2.2.6.RELEASE'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'java'
  id 'eclipse'

  id 'jacoco'

  id 'checkstyle'

  id "com.github.spotbugs" version "3.0.0"

  id 'pmd'

  id 'de.aaschmid.cpd' version '3.1'

  id "se.bjurr.violations.violations-gradle-plugin" version "1.40"
}

group = 'com.tactfactory.monprojetsb'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-freemarker'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  runtimeOnly 'mysql:mysql-connector-java'
  testImplementation('org.springframework.boot:spring-boot-starter-test')
  testImplementation("com.h2database:h2:1.4.197")
}

task checkstyleMain (type: Checkstyle, overwrite: true) {
    ignoreFailures = true
    showViolations = false
}

task checkstyleTest (type: Checkstyle, overwrite: true){
    ignoreFailures = true
    showViolations = false
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
  ignoreFailures = true
}

task pmdMain(type: Pmd, overwrite: true) {
  ignoreFailures = true
}

task pmdTest(type: Pmd, overwrite: true) {
  ignoreFailures = true
}

cpdCheck {
  reports {
    text.enabled = true
    xml.enabled = true
  }
  source = sourceSets.main.allJava
  minimumTokenCount = 50
}

test {
  useJUnitPlatform()
  ignoreFailures = true
  reports {
    junitXml.enabled = false
    html.enabled = true
  }
}

task violations(type: se.bjurr.violations.gradle.plugin.ViolationsTask) {
   //
   // Optional config
   //
   maxReporterColumnWidth = 0 // 0 means "no limit"
   maxRuleColumnWidth = 60
   maxSeverityColumnWidth = 0
   maxLineColumnWidth = 0
   maxMessageColumnWidth = 50
   codeClimateFile = file('code-climate-file.json') // Will create a CodeClimate JSON report.
   violationsFile = file('violations-file.json') // Will create a normalized JSON report.


   //
   // Global configuration, remove if you dont want to report violations for
   // the entire repo.
   //
   minSeverity = 'INFO' // INFO, WARN or ERROR
   detailLevel = 'VERBOSE' // PER_FILE_COMPACT, COMPACT or VERBOSE
   maxViolations = 99999999 // Will fail the build if total number of found violations is higher
   printViolations = true // Will print violations found in diff


   //
   // Diff configuration, remove if you dont want to report violations for
   // files changed between specific revisions.
   //
   // diff-properties can be supplied with something like:
   //
   // ./gradlew violations -PdiffFrom=e4de20e -PdiffTo=HEAD
   //
   // And in Travis, you could add:
   //
   //  script:
   //   - 'if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then bash ./gradlew check -PdiffFrom=$TRAVIS_PULL_REQUEST_BRANCH -PdiffTo=$TRAVIS_BRANCH ; fi'
   //
   diffFrom = project.properties.diffFrom // Can be empty (ignored), Git-commit or any Git-reference
   diffTo = project.properties.diffTo // Same as above
   diffMinSeverity = 'INFO' // INFO, WARN or ERROR
   diffDetailLevel = 'VERBOSE' // PER_FILE_COMPACT, COMPACT or VERBOSE
   diffMaxViolations = 99 // Will fail the build if number of violations, in the diff within from/to, is higher
   diffPrintViolations = true // Will print violations found in diff
   gitRepo = file('.') // Where to look for Git


   //
   // This is mandatory regardless of if you want to report violations between
   // revisions or the entire repo.
   //
   // Many more formats available, see: https://github.com/tomasbjerre/violations-lib
   violations = [
      ["FINDBUGS",   projectDir.path + "/build/reports/", ".*/findbugs/.*\\.xml\$",   "Findbugs"],
      ["PMD",        projectDir.path + "/build/reports/", ".*/pmd/.*\\.xml\$",        "PMD"],
      ["CHECKSTYLE", projectDir.path + "/build/reports/", ".*/checkstyle/.*\\.xml\$", "Checkstyle"],
      ["CPD", projectDir.path + "/build/reports/", ".*/cpd/.*\\.xml\$", "Cpd"],
   ]
}

check.finalizedBy violations

